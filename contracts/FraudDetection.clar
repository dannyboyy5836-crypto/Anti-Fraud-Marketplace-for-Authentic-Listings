(define-constant ERR-NOT-AUTHORIZED u100)
(define-constant ERR-INVALID-LISTING-ID u101)
(define-constant ERR-INVALID-ITEM-HASH u102)
(define-constant ERR-INVALID-SELLER-DID u103)
(define-constant ERR-INVALID-REPUTATION u104)
(define-constant ERR-DUPLICATE-HASH u105)
(define-constant ERR-BELOW-THRESHOLD u106)
(define-constant ERR-BLACKLISTED-SELLER u107)
(define-constant ERR-ANOMALY-DETECTED u108)
(define-constant ERR-INVALID-PRICE u109)
(define-constant ERR-INVALID-CATEGORY u110)
(define-constant ERR-INVALID-TIMESTAMP u111)
(define-constant ERR-AUTHORITY-NOT-SET u112)
(define-constant ERR-INVALID-RISK-SCORE u113)
(define-constant ERR-MAX-RISK-EXCEEDED u114)
(define-constant ERR-INVALID-LOCATION u115)
(define-constant ERR-INVALID-CURRENCY u116)
(define-constant ERR-LISTING-PAUSED u117)
(define-constant ERR-LISTING-NOT-FOUND u118)
(define-constant ERR-INVALID-UPDATE u119)
(define-constant ERR-UPDATE-NOT-ALLOWED u120)

(define-data-var fraud-threshold uint u50)
(define-data-var min-reputation uint u100)
(define-data-var max-risk-score uint u80)
(define-data-var authority-contract (optional principal) none)
(define-data-var anomaly-detection-enabled bool true)
(define-data-var default-category (string-ascii 50) "general")

(define-map flagged-listings uint {reason: (string-ascii 100), timestamp: uint, risk-score: uint})
(define-map seller-blacklist principal bool)
(define-map listing-history (string-ascii 64) uint)
(define-map risk-scores uint uint)
(define-map listing-details uint {item-hash: (string-ascii 64), seller-did: principal, price: uint, category: (string-ascii 50), location: (string-ascii 100), currency: (string-ascii 20), status: bool})

(define-read-only (get-fraud-threshold)
  (var-get fraud-threshold)
)

(define-read-only (get-min-reputation)
  (var-get min-reputation)
)

(define-read-only (get-max-risk-score)
  (var-get max-risk-score)
)

(define-read-only (get-authority-contract)
  (var-get authority-contract)
)

(define-read-only (is-anomaly-detection-enabled)
  (var-get anomaly-detection-enabled)
)

(define-read-only (get-flagged-listing (listing-id uint))
  (map-get? flagged-listings listing-id)
)

(define-read-only (is-seller-blacklisted (seller principal))
  (default-to false (map-get? seller-blacklist seller))
)

(define-read-only (get-listing-history (item-hash (string-ascii 64)))
  (default-to u0 (map-get? listing-history item-hash))
)

(define-read-only (get-risk-score (listing-id uint))
  (default-to u0 (map-get? risk-scores listing-id))
)

(define-read-only (get-listing-details (listing-id uint))
  (map-get? listing-details listing-id)
)

(define-private (validate-listing-id (id uint))
  (if (> id u0)
    (ok true)
    (err ERR-INVALID-LISTING-ID))
)

(define-private (validate-item-hash (hash (string-ascii 64)))
  (if (is-eq (len hash) u64)
    (ok true)
    (err ERR-INVALID-ITEM-HASH))
)

(define-private (validate-seller-did (did principal))
  (if (not (is-eq did tx-sender))
    (ok true)
    (err ERR-INVALID-SELLER-DID))
)

(define-private (validate-reputation (rep uint))
  (if (>= rep (var-get min-reputation))
    (ok true)
    (err ERR-INVALID-REPUTATION))
)

(define-private (validate-price (price uint))
  (if (> price u0)
    (ok true)
    (err ERR-INVALID-PRICE))
)

(define-private (validate-category (cat (string-ascii 50)))
  (if (and (> (len cat) u0) (<= (len cat) u50))
    (ok true)
    (err ERR-INVALID-CATEGORY))
)

(define-private (validate-location (loc (string-ascii 100)))
  (if (and (> (len loc) u0) (<= (len loc) u100))
    (ok true)
    (err ERR-INVALID-LOCATION))
)

(define-private (validate-currency (cur (string-ascii 20)))
  (if (or (is-eq cur "STX") (is-eq cur "USD") (is-eq cur "BTC"))
    (ok true)
    (err ERR-INVALID-CURRENCY))
)

(define-private (validate-risk-score (score uint))
  (if (<= score (var-get max-risk-score))
    (ok true)
    (err ERR-INVALID-RISK-SCORE))
)

(define-private (check-duplicate-hash (hash (string-ascii 64)))
  (if (is-eq (get-listing-history hash) u0)
    (ok true)
    (err ERR-DUPLICATE-HASH))
)

(define-private (check-blacklist (seller principal))
  (if (not (is-seller-blacklisted seller))
    (ok true)
    (err ERR-BLACKLISTED-SELLER))
)

(define-private (calculate-risk-score (rep uint) (price uint) (cat (string-ascii 50)))
  (+ (/ price u100) (- u100 rep) (if (is-eq cat "high-risk") u20 u0))
)

(define-private (detect-anomaly (listing-id uint) (rep uint) (price uint) (cat (string-ascii 50)))
  (let ((score (calculate-risk-score rep price cat)))
    (map-set risk-scores listing-id score)
    (if (> score (var-get max-risk-score))
      (err ERR-ANOMALY-DETECTED)
      (ok score)))
)

(define-public (set-authority-contract (contract-principal principal))
  (begin
    (asserts! (is-none (var-get authority-contract)) (err ERR-AUTHORITY-NOT-SET))
    (var-set authority-contract (some contract-principal))
    (ok true))
)

(define-public (set-fraud-threshold (new-threshold uint))
  (begin
    (asserts! (is-some (var-get authority-contract)) (err ERR-NOT-AUTHORIZED))
    (var-set fraud-threshold new-threshold)
    (ok true))
)

(define-public (set-min-reputation (new-min uint))
  (begin
    (asserts! (is-some (var-get authority-contract)) (err ERR-NOT-AUTHORIZED))
    (var-set min-reputation new-min)
    (ok true))
)

(define-public (set-max-risk-score (new-max uint))
  (begin
    (asserts! (is-some (var-get authority-contract)) (err ERR-NOT-AUTHORIZED))
    (var-set max-risk-score new-max)
    (ok true))
)

(define-public (toggle-anomaly-detection)
  (begin
    (asserts! (is-some (var-get authority-contract)) (err ERR-NOT-AUTHORIZED))
    (var-set anomaly-detection-enabled (not (var-get anomaly-detection-enabled)))
    (ok (var-get anomaly-detection-enabled)))
)

(define-public (blacklist-seller (seller principal))
  (begin
    (asserts! (is-some (var-get authority-contract)) (err ERR-NOT-AUTHORIZED))
    (map-set seller-blacklist seller true)
    (ok true))
)

(define-public (unblacklist-seller (seller principal))
  (begin
    (asserts! (is-some (var-get authority-contract)) (err ERR-NOT-AUTHORIZED))
    (map-delete seller-blacklist seller)
    (ok true))
)

(define-public (validate-listing (listing-id uint) (item-hash (string-ascii 64)) (seller-did principal) (rep uint) (price uint) (category (string-ascii 50)) (location (string-ascii 100)) (currency (string-ascii 20)))
  (begin
    (try! (validate-listing-id listing-id))
    (try! (validate-item-hash item-hash))
    (try! (validate-seller-did seller-did))
    (try! (validate-reputation rep))
    (try! (validate-price price))
    (try! (validate-category category))
    (try! (validate-location location))
    (try! (validate-currency currency))
    (try! (check-duplicate-hash item-hash))
    (try! (check-blacklist seller-did))
    (if (var-get anomaly-detection-enabled)
      (try! (detect-anomaly listing-id rep price category))
      (ok u0))
    (map-set listing-details listing-id {item-hash: item-hash, seller-did: seller-did, price: price, category: category, location: location, currency: currency, status: true})
    (map-set listing-history item-hash listing-id)
    (print {event: "listing-validated", id: listing-id})
    (ok true))
)

(define-public (flag-listing (listing-id uint) (reason (string-ascii 100)) (risk-score uint))
  (let ((details (unwrap! (get-listing-details listing-id) (err ERR-LISTING-NOT-FOUND))))
    (asserts! (is-some (var-get authority-contract)) (err ERR-NOT-AUTHORIZED))
    (try! (validate-risk-score risk-score))
    (map-set flagged-listings listing-id {reason: reason, timestamp: block-height, risk-score: risk-score})
    (map-set listing-details listing-id (merge details {status: false}))
    (print {event: "listing-flagged", id: listing-id, reason: reason})
    (ok true))
)

(define-public (unflag-listing (listing-id uint))
  (let ((details (unwrap! (get-listing-details listing-id) (err ERR-LISTING-NOT-FOUND))))
    (asserts! (is-some (var-get authority-contract)) (err ERR-NOT-AUTHORIZED))
    (map-delete flagged-listings listing-id)
    (map-set listing-details listing-id (merge details {status: true}))
    (print {event: "listing-unflagged", id: listing-id})
    (ok true))
)

(define-public (update-listing-price (listing-id uint) (new-price uint))
  (let ((details (unwrap! (get-listing-details listing-id) (err ERR-LISTING-NOT-FOUND))))
    (asserts! (is-eq (get seller-did details) tx-sender) (err ERR-NOT-AUTHORIZED))
    (try! (validate-price new-price))
    (map-set listing-details listing-id (merge details {price: new-price}))
    (print {event: "listing-updated", id: listing-id, new-price: new-price})
    (ok true))
)

(define-public (pause-listing (listing-id uint))
  (let ((details (unwrap! (get-listing-details listing-id) (err ERR-LISTING-NOT-FOUND))))
    (asserts! (is-eq (get seller-did details) tx-sender) (err ERR-NOT-AUTHORIZED))
    (asserts! (get status details) (err ERR-LISTING-PAUSED))
    (map-set listing-details listing-id (merge details {status: false}))
    (print {event: "listing-paused", id: listing-id})
    (ok true))
)

(define-public (resume-listing (listing-id uint))
  (let ((details (unwrap! (get-listing-details listing-id) (err ERR-LISTING-NOT-FOUND))))
    (asserts! (is-eq (get seller-did details) tx-sender) (err ERR-NOT-AUTHORIZED))
    (asserts! (not (get status details)) (err ERR-INVALID-STATUS))
    (map-set listing-details listing-id (merge details {status: true}))
    (print {event: "listing-resumed", id: listing-id})
    (ok true))
)